import React, { FC } from 'react';
import {
  CertificateModal,
  CertificateValidation,
  FileControls,
  FormInput,
  MessageBox,
} from 'components';
import { State, Dispatch } from 'store/types';
import { connect } from 'react-redux';
import './DFSPCertificateAuthority.css';
import { withMount } from 'utils/hocs';
import { getDfspName } from 'App/ConnectionWizard/selectors';
import { AnyAction } from 'redux';
import { CertificateValidationResults } from 'App/types';

import {
  DFSPCertificateAuthorityPayload,
  ChangeAndSubmitDFSPCARootCertificateAction,
  ShowDFSPCARootCertificateModalAction,
  HideDFSPCARootCertificateModalAction,
  ChangeAndSubmitDFSPCARootIntermediateChainAction,
  ShowDFSPCAIntermediateChainModalAction,
  HideDFSPCAIntermediateChainModalAction,
  AutoGenerateDFSPCACertificateAction,
  RequestDFSPCAHubCertificateModalAction,
  ShowDFSPCAHubCertificateModalAction,
  HideDFSPCAHubCertificateModalAction,
} from './types';

import {
  changeAndSubmitDFSPCARootCertificate,
  changeAndSubmitDFSPCARootIntermediateChain,
  downloadDfspCaRootCertificate,
  downloadDfspCaIntermediateChain,
  hideDFSPCARootCertificateModal,
  hideDFSPCAIntermediateChainModal,
  showDFSPCARootCertificateModal,
  showDFSPCAIntermediateChainModal,
  autoGenerateDFSPCACertificate,
  showDFSPCAHubCertificateModal,
  downloadDfspCaHubCertificate,
  hideDFSPCAHubCertificateModal,
  requestDFSPCAHubCertificate,
  requestDFPCA,
} from './actions';

import * as selectors from './selectors';

export interface DFSPCertificateAuthorityProps {
  dfspName?: string;
  error?: string;
  isDfspCaPending: boolean;
  rootCertificate?: string;
  isRootCertificateModalVisible: boolean;
  onRootCertificateChange: (
    cert: DFSPCertificateAuthorityPayload
  ) => ChangeAndSubmitDFSPCARootCertificateAction;
  onRootCertificateViewClick: () => ShowDFSPCARootCertificateModalAction;
  onRootCertificateDownloadClick: () => AnyAction;
  onRootCertificateModalCloseClick: () => HideDFSPCARootCertificateModalAction;
  intermediateChain?: string;
  isIntermediateChainModalVisible: boolean;
  onIntermediateChainChange: (
    cert: DFSPCertificateAuthorityPayload
  ) => ChangeAndSubmitDFSPCARootIntermediateChainAction;
  onIntermediateChainViewClick: () => ShowDFSPCAIntermediateChainModalAction;
  onIntermediateChainDownloadClick: () => AnyAction;
  onIntermediateChainModalCloseClick: () => HideDFSPCAIntermediateChainModalAction;
  validations: CertificateValidationResults[];
  validationState?: string;
  isAutoGenerateCAEnabled: boolean;
  isAutoGeneratePending: boolean;
  onAutoGenerateCAClick: (
    cert: DFSPCertificateAuthorityPayload
  ) => AutoGenerateDFSPCACertificateAction;
  hubCertificate?: string;
  isHubCertificateModalVisible: boolean;
  isHubCertificatePending: boolean;
  onHubCertificateChange: () => RequestDFSPCAHubCertificateModalAction;
  onHubCertificateViewClick: () => ShowDFSPCAHubCertificateModalAction;
  onHubCertificateDownloadClick: () => AnyAction;
  onHubCertificateModalCloseClick: () => HideDFSPCAHubCertificateModalAction;
}

const stateProps = (state: State) => ({
  dfspName: getDfspName(state),
  error: selectors.getDfspCaError(state),
  rootCertificate: selectors.getDfspCaRootCertificate(state),
  intermediateChain: selectors.getDfspCaIntermediateChain(state),
  validations: selectors.getDfspCaValidations(state),
  validationState: selectors.getDfspCaValidationState(state),
  isRootCertificateModalVisible: selectors.getIsDfspCaRootCertificateModalVisible(state),
  isIntermediateChainModalVisible: selectors.getIsDfspCaIntermediateChainModalVisible(state),
  isDfspCaPending: selectors.getIsDfspCaPending(state),
  isAutoGenerateCAEnabled: selectors.getIsAutoGenerateCAEnabled(state),
  isAutoGeneratePending: selectors.getisAutoGeneratePending(state),
  isHubCertificateModalVisible: selectors.getIsDfspCaHubCertificateModalVisible(state),
  hubCertificate: selectors.getDfspCaHubCertificate(state),
  isHubCertificatePending: selectors.getisDfspCaHubCertificatePending(state),
});

const actionProps = (dispatch: Dispatch) => ({
  onMount: () => dispatch(requestDFPCA()),
  onRootCertificateChange: (certificate: string) =>
    dispatch(changeAndSubmitDFSPCARootCertificate({ certificate })),
  onRootCertificateViewClick: () => dispatch(showDFSPCARootCertificateModal()),
  onRootCertificateDownloadClick: () => dispatch(downloadDfspCaRootCertificate()),
  onRootCertificateModalCloseClick: () => dispatch(hideDFSPCARootCertificateModal()),
  onIntermediateChainChange: (certificate: string) =>
    dispatch(changeAndSubmitDFSPCARootIntermediateChain({ certificate })),
  onIntermediateChainDownloadClick: () => dispatch(downloadDfspCaIntermediateChain()),
  onIntermediateChainViewClick: () => dispatch(showDFSPCAIntermediateChainModal()),
  onIntermediateChainModalCloseClick: () => dispatch(hideDFSPCAIntermediateChainModal()),
  onAutoGenerateCAClick: (certificate: string) =>
    dispatch(autoGenerateDFSPCACertificate({ certificate })),
  onHubCertificateChange: () => dispatch(requestDFSPCAHubCertificate()),
  onHubCertificateViewClick: () => dispatch(showDFSPCAHubCertificateModal()),
  onHubCertificateDownloadClick: () => dispatch(downloadDfspCaHubCertificate()),
  onHubCertificateModalCloseClick: () => dispatch(hideDFSPCAHubCertificateModal()),
});

const DFSPCertificateAuthority: FC<DFSPCertificateAuthorityProps> = ({
  dfspName,
  error,
  rootCertificate,
  intermediateChain,
  validations,
  validationState,
  isRootCertificateModalVisible,
  isIntermediateChainModalVisible,
  isDfspCaPending,
  onRootCertificateChange,
  onRootCertificateViewClick,
  onRootCertificateDownloadClick,
  onRootCertificateModalCloseClick,
  onIntermediateChainChange,
  onIntermediateChainViewClick,
  onIntermediateChainDownloadClick,
  onIntermediateChainModalCloseClick,
  isAutoGenerateCAEnabled,
  onAutoGenerateCAClick,
  isAutoGeneratePending,
  hubCertificate,
  isHubCertificateModalVisible,
  isHubCertificatePending,
  onHubCertificateChange,
  onHubCertificateViewClick,
  onHubCertificateDownloadClick,
  onHubCertificateModalCloseClick,
}) => {
  if (error) {
    return (
      <MessageBox
        icon="warning-sign"
        kind="danger"
        message="There was an error while loading the certificates"
        center
        size={30}
        fontSize={17}
      />
    );
  }

  return (
    <div className="dfsp-ca">
      {/* To be enabled later */}

      {/* <Button
        className="dfsp-ca____button"
        label="Auto-Generate CA Certificate"
        disabled={!isAutoGenerateCAEnabled}
        onClick={onAutoGenerateCAClick}
        pending={isAutoGeneratePending}
      /> */}

      {/* <div className="dfsp-ca__info-message">
        <Icon name="info-small" fill="#f49935" size={16} />
        <span className="dfsp-ca__info-message__text">
          <b>Note: </b>
          If you do not upload a Root Certificate or Intermediate Chain then we assume you will be
          using a well known external CA
        </span>
      </div> */}

      <div className="dfsp-ca__certificate-validation">
        <CertificateValidation type="ca" validations={validations} state={validationState} />
      </div>

      <div className="dfsp-ca__root-certificate">
        <FormInput
          type="file"
          label="DFSP Root Certificate"
          parseFileAsText
          onChange={onRootCertificateChange}
          elementWidth="400px"
          value={rootCertificate}
          fileName={`${dfspName}-root.pem`}
          pending={isDfspCaPending}
          required
        />

        {rootCertificate && (
          <FileControls
            onViewClick={onRootCertificateViewClick}
            onDownloadClick={onRootCertificateDownloadClick}
          />
        )}
      </div>

      <div className="dfsp-ca__intermediate-chain">
        <FormInput
          type="file"
          label="DFSP Intermediate Chain"
          parseFileAsText
          onChange={onIntermediateChainChange}
          pending={isDfspCaPending}
          value={intermediateChain}
          fileName={`${dfspName}-intermediates.pem`}
          elementWidth="400px"
          required
        />
        {intermediateChain && (
          <FileControls
            onViewClick={onIntermediateChainViewClick}
            onDownloadClick={onIntermediateChainDownloadClick}
          />
        )}
      </div>

      <div className="dfsp-ca__hub-certificate">
        <FormInput
          type="text"
          label="Hub Root's Certificate"
          parseFileAsText
          onChange={onHubCertificateChange}
          disabled
          elementWidth="400px"
          value={`${dfspName}-hub.pem`}
          pending={isHubCertificatePending}
        />

        {hubCertificate && (
          <FileControls
            onViewClick={onHubCertificateViewClick}
            onDownloadClick={onHubCertificateDownloadClick}
          />
        )}
      </div>

      {isRootCertificateModalVisible && (
        <CertificateModal
          onClose={onRootCertificateModalCloseClick}
          content={rootCertificate}
          title="DFSP Root Certificate"
        />
      )}

      {isIntermediateChainModalVisible && (
        <CertificateModal
          onClose={onIntermediateChainModalCloseClick}
          content={intermediateChain}
          title="DFSP Intermediate Chain"
        />
      )}

      {isHubCertificateModalVisible && (
        <CertificateModal
          onClose={onHubCertificateModalCloseClick}
          content={hubCertificate}
          title="Hub Root Certificate"
        />
      )}
    </div>
  );
};

const MountedDFSPCertificateAuthority = withMount(DFSPCertificateAuthority, 'onMount');

export default connect(stateProps, actionProps)(MountedDFSPCertificateAuthority);
