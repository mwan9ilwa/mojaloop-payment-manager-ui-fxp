import {
  RESET_DFSP_CA,
  SET_DFSP_CA_ERROR,
  SET_DFSP_CA_ROOT_CERTIFICATE,
  SET_DFSP_CA_INTERMEDIATE_CHAIN,
  SET_DFSP_CA_VALIDATIONS,
  SET_DFSP_CA_VALIDATION_STATE,
  CHANGE_DFSP_CA_ROOT_CERTIFICATE,
  CHANGE_DFSP_CA_INTERMEDIATE_CHAIN,
  SHOW_DFSP_CA_ROOT_CERTIFICATE_MODAL,
  HIDE_DFSP_CA_ROOT_CERTIFICATE_MODAL,
  SHOW_DFSP_CA_INTERMEDIATE_CHAIN_MODAL,
  HIDE_DFSP_CA_INTERMEDIATE_CHAIN_MODAL,
  DFSPCertificateAuthorityState,
  DFSPCertificateAuthorityActionTypes,
  SET_AUTO_GENERATE_DFSP_CA_CERTIFICATE,
  SHOW_DFSP_CA_HUB_CERTIFICATE_MODAL,
  HIDE_DFSP_CA_HUB_CERTIFICATE_MODAL,
  SET_DFSP_CA_HUB_CERTIFICATE,
} from './types';

export const initialState: DFSPCertificateAuthorityState = {
  dfspName: undefined,
  dfspCaError: undefined,
  dfspCaRootCert: undefined,
  dfspCaIntermediateChain: undefined,
  dfspCaHubCert: undefined,
  dfspCaValidations: [],
  dfspCaValidationState: undefined,
  isDfspCaRootCertificateModalVisible: false,
  isDfspCaIntermediateChainModalVisible: false,
  isDfspCaHubCertificateModalVisible: false,
};

export default function DFSPCertificateAuthorityReducer(
  state = initialState,
  action: DFSPCertificateAuthorityActionTypes
) {
  switch (action.type) {
    case RESET_DFSP_CA:
      return initialState;

    case SET_DFSP_CA_ERROR: {
      return {
        ...state,
        dfspCaError: action.error,
      };
    }

    case SET_DFSP_CA_ROOT_CERTIFICATE:
      return {
        // the server sends null for a non-existing certificate
        // causing the ui to fail on the fileuploader component
        // so it needs to be stored as an undefined value
        ...state,
        dfspCaRootCert: action.certificate || null,
      };

    case SET_DFSP_CA_INTERMEDIATE_CHAIN:
      return {
        // the server sends null for a non-existing certificate
        // causing the ui to fail on the fileuploader component
        // so it needs to be stored as an undefined value
        ...state,
        dfspCaIntermediateChain: action.certificate || null,
      };

    case SET_DFSP_CA_VALIDATIONS:
      return {
        ...state,
        dfspCaValidations: action.validations,
      };

    case SET_DFSP_CA_VALIDATION_STATE:
      return {
        ...state,
        dfspCaValidationState: action.validationState,
      };

    case CHANGE_DFSP_CA_ROOT_CERTIFICATE:
      return {
        ...state,
        dfspCaRootCert: action.certificate,
        dfspCaValidations: initialState.dfspCaValidations,
        dfspCaValidationState: initialState.dfspCaValidationState,
      };

    case CHANGE_DFSP_CA_INTERMEDIATE_CHAIN:
      return {
        ...state,
        dfspCaIntermediateChain: action.certificate,
        dfspCaValidations: initialState.dfspCaValidations,
        dfspCaValidationState: initialState.dfspCaValidationState,
      };

    case SHOW_DFSP_CA_ROOT_CERTIFICATE_MODAL:
      return {
        ...state,
        isDfspCaRootCertificateModalVisible: true,
      };

    case HIDE_DFSP_CA_ROOT_CERTIFICATE_MODAL:
      return {
        ...state,
        isDfspCaRootCertificateModalVisible: false,
      };

    case SHOW_DFSP_CA_INTERMEDIATE_CHAIN_MODAL:
      return {
        ...state,
        isDfspCaIntermediateChainModalVisible: true,
      };

    case HIDE_DFSP_CA_INTERMEDIATE_CHAIN_MODAL:
      return {
        ...state,
        isDfspCaIntermediateChainModalVisible: false,
      };

    case SET_AUTO_GENERATE_DFSP_CA_CERTIFICATE:
      return {
        ...state,
        autoGenerateDFSPCACertificate: action.certificate,
      };

    case SET_DFSP_CA_HUB_CERTIFICATE:
      return {
        ...state,
        dfspCaHubCert: action.certificate || null,
      };

    case SHOW_DFSP_CA_HUB_CERTIFICATE_MODAL:
      return {
        ...state,
        isDfspCaHubCertificateModalVisible: true,
      };

    case HIDE_DFSP_CA_HUB_CERTIFICATE_MODAL:
      return {
        ...state,
        isDfspCaHubCertificateModalVisible: false,
      };

    default:
      return state;
  }
}
